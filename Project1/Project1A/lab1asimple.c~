
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <termios.h>
#include <getopt.h>

/* Use this variable to remember original terminal attributes. */

struct termios saved_attributes;

//setting up terminal
void
reset_input_mode (void)
{
  tcsetattr (STDIN_FILENO, TCSANOW, &saved_attributes);
}

void
set_input_mode (void)
{
  struct termios tattr;
  char *name;

  /* Save the terminal attributes so we can restore them later. */
  tcgetattr (STDIN_FILENO, &saved_attributes);

  /* Set the funny terminal modes. */
  tcgetattr (STDIN_FILENO, &tattr);
  tattr.c_lflag &= ~(ICANON|ECHO); /* Clear ICANON and ECHO. */
  tattr.c_cc[VMIN] = 1;
  tattr.c_cc[VTIME] = 0;
  tcsetattr (STDIN_FILENO, TCSAFLUSH, &tattr);
}


int
main (int argc, char** argv)
{
  char c;

  set_input_mode ();

  int opt = 0; 
  int option_index = 0;

  static struct option long_options[] =
    {
      {"shell", 0, 0, 's'},
      {0, 0, 0, 0}
    };
  
  while (1) {

    opt = getopt_long(argc, argv, "", long_options, &option_index);

    if (opt == -1)
      break;

    if (opt == 's')
      {
	  int to_child_pipe[2];
	  int from_child_pipe[2];
	  pid_t child_pid = -1;

	  if (pipe(to_child_pipe) == -1)
	    {
	      fprintf(stderr, "pipe() failed!\n");
	      exit(1);
	    }
	  if (pipe(from_child_pipe) == -1)
	    {
	      fprintf(stderr, "pipe() failed!\n");
	    }
	  
	  child_pid = fork();
	  
	  if (child_pid > 0) // parent process
	    {
	      close(to_child_pipe[0]);
	      close(from_child_pipe[1]);
	      char buffer[1000];
	      int count = 0;
	      count = read(STDIN_FILENO, buffer, 1000);
	      write(to_child_pipe[1], buffer, count);
	      count = read(from_child_pipe[0], buffer, 1000);
	      write(STDOUT_FILENO, buffer, count);
	    }
	  else if (child_pid == 0) // child process
	    {
	      close(to_child_pipe[1]);
	      close(from_child_pipe[0]);
	      dup2(to_child_pipe[0], STDIN_FILENO);
	      dup2(from_child_pipe[1], STDOUT_FILENO);
	      close(to_child_pipe[0]);
	      close(from_child_pipe[1]);
	      
	      char *execvp_argv[2];
	      char execvp_filename[]="/bin/bash";
	      execvp_argv[0] = execvp_filename;
	      execvp_argv[1] = NULL;
	      if (execvp(execvp_filename, execvp_argv) == -1)
		{
		  fprintf(stderr, "execvp() failed\n");
		  exit(1);
		}
	    }
	  else // fork failed
	    {
	      fprintf(stderr, "fork() failed\n");
	      exit(1);
	    }
      }
  }

  while (1)
    {
      read (STDIN_FILENO, &c, 1);
      // if (c == 0x0D || c == 0x0A)
      //{
      //  write(1, "\r\n", 2);
      //}
      if (c == '\004')          /* C-d */
        break;
      else
        write(1,&c,1);
    }

  return EXIT_SUCCESS;
}
