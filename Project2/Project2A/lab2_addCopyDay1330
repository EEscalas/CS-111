//Elena Escalas
//704560697
//elenaescalas@g.ucla.edu

#include <stdio.h>
#include <unistd.h>
#include <getopt.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <signal.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <time.h>
#include <pthread.h>

/*
timespec structure definted in time.h:
struct timespec {
  time_t tv_sec; //seconds
  long tv_nsec;  //nanoseconds
};*/

struct add_args
{
  long long *ptr_arg;
  long long val_arg;
};

//flags
int opt_threads = 0;
int opt_iterations = 0;
int opt_yield = 0;
int opt_sync = 0;
int opt_debug = 0;

//arg variables
long long num_threads = 1;
long long num_iterations = 1;
char sync_type;

void add(long long *pointer, long long value);

struct timespec getStartTime()
{
  struct timespec start_time;
  int timer_valid = clock_gettime(CLOCK_MONOTONIC,&start_time);
  if (timer_valid < 0)
    fprintf(stderr, "Error: clock failure\n");
}

long long getTime_nano(struct timespec start)
{
  struct timespec current_time;
  int timer_valid = clock_gettime(CLOCK_MONOTONIC,&current_time);
  if (timer_valid < 0) fprintf(stderr, "Error: clock failure\n");
  if (opt_debug) fprintf(stdout, "Current time: %i seconds %i nanoseconds\n",current_time.tv_sec, current_time.tv_nsec);
  long long cur_nano = current_time.tv_sec*1000000000 + current_time.tv_nsec;
  long long start_nano = start.tv_sec*1000000000 + start.tv_nsec;
  return cur_nano - start_nano;
}

void threadTask(long long *ctr, int threadNum)
{
  int it = 0;
  for (it = 0; it < num_iterations; it++)
    {
      add(ctr,1);
      if (opt_debug) fprintf(stdout, "//   Thread %i Completed Iteration %i\n//       Counter Value: %i\n", threadNum, it+1,*ctr);      
    }
  for (it = 0; it < num_iterations; it++)
    {
      add(ctr,-1);
      if (opt_debug) fprintf(stdout, "//   Thread %i Completed Iteration %i\n//       Counter Value: %i\n", threadNum, it+1,*ctr);
    }
  // pthread exit
}

int main (int argc, char** argv)
{
  //getopt_long prep
  int opt;
  int input_fd;
  int output_fd;
  char buffer;

  int this_option_optiond = optind ? optind : 1;
  int option_index = 0;
  
  static struct option long_options[] =
      {
        {"threads",    optional_argument, 0, 't'},
        {"iterations", optional_argument, 0, 'i'},
        {"yield",      no_argument,       0, 'y'},
        {"sync",       required_argument, 0, 's'},
        {"debug",      no_argument,       0, 'd'},
	{0, 0, 0, 0}
      };

  while (1) {
 
    opt = getopt_long(argc, argv, "", long_options, &option_index);

    if (opt == -1)
        break;

    switch(opt)
      {
      case 'd':
	opt_debug = 1;
	break;
      case 't':
	opt_threads = 1;
	if (optarg == NULL || (atoi(optarg)== 0))
	  num_threads = 1;
	else
	  num_threads = atoi(optarg);
        break;
      case 'i':
	opt_iterations = 1;
	if (optarg == NULL || (atoi(optarg)== 0))
	  num_iterations = 1;
	else
	  num_iterations = atoi(optarg);
	break;
      case 'y':
	opt_yield = 1;
	break;
      case 's':
	opt_sync = 1;
	sync_type = *optarg;
	break;
      default:
	exit(1);
	break;
      }
  }    
  
  if (opt_debug)
    {
      if (opt_threads)
	fprintf(stdout, "num_threads = %i\n", num_threads);
      if (opt_iterations)
	fprintf(stdout, "num_iterations = %i\n", num_iterations); 
      if (opt_yield)
	fprintf(stdout, "yielding\n");
      if (opt_sync)
	{
	  if (sync_type == 'm')
	    fprintf(stdout, "syncing method: mutex\n");
	  if (sync_type == 's')
	    fprintf(stdout, "synching method: spin locks\n");
	  if (sync_type == 'c')
	    fprintf(stdout, "synching method: compare and swap\n");
	  else
	    {
	      fprintf(stderr, "Error: invalid syncing method\n");
	      exit(1);
	    }
	}
    }
  
  if (opt_threads && opt_iterations)
    {
      long long counter = 0;
      
      struct timespec overall_start = getStartTime();
      if (opt_debug) fprintf(stdout, "Start Time: %i seconds and %i nanoseconds\n", overall_start.tv_sec, overall_start.tv_nsec);
      
      int th = 0;

      for (th = 0; th < num_threads; th++)
	{
	  //create threads
	  if (opt_debug) fprintf(stdout, "//   Thread %i Created: \n//       Counter Value: %i\n", th+1, counter);
	  threadTask(&counter,th+1);
	}     
      
      for (th = 0; th < num_threads; th++)
	{
	  //join threads
	  if (opt_debug) fprintf(stdout, "//   Thread %i Joined: \n//        Counter Value: %i\n", th+1, counter);
	}
      long long total_run_time = getTime_nano(overall_start);
      if (opt_debug) fprintf(stdout, "//Final Value of Counter: %i\n",counter); 
      
      if (opt_debug) fprintf(stdout, "Total run time: %i nanoseconds\n", total_run_time);

      /*  print results  */
      
      // print name
      fprintf(stdout,"add-");
      if (opt_yield) fprintf(stdout,"yield-");
      if(!opt_sync) fprintf(stdout,"none,");
      else fprintf(stdout,"%c,",sync_type);

      fprintf(stdout,"%llu,",num_threads); // print number of threads
      fprintf(stdout,"%llu,",num_iterations); // print number of iterations
      fprintf(stdout,"%llu,",num_threads*num_iterations*2); // print number of operations
      fprintf(stdout,"%llu,",total_run_time); // print total run time
      fprintf(stdout,"%llu,",total_run_time/(num_threads*num_iterations*2)); // print average time per operation
      fprintf(stdout,"%llu\n",counter); // counter total at the end of the run
    }
  exit(0);
}


void add(long long *pointer, long long value) {
  long long sum = *pointer + value;
  *pointer = sum;
}
