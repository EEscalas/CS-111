//Elena Escalas
//704560697
//elenaescalas@g.ucla.edu

#include <stdio.h>
#include <unistd.h>
#include <getopt.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <signal.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <time.h>
#include <pthread.h>
#include <sched.h>
#include "SortedList.h"

/*
timespec structure definted in time.h:
struct timespec {
  time_t tv_sec; //seconds
  long tv_nsec;  //nanoseconds
  };*/

//flags
int opt_threads = 0;
int opt_iterations = 0;
int opt_yield = 0;
int opt_yield_insert = 0;
int opt_yield_delete = 0;
int opt_yield_lookup = 0;
int opt_debug = 0;
int opt_sync = 0;
int yielding = 0;

//arg variables
long long num_threads = 1;
long long num_iterations = 1;
char sync_type;

//list variables
SortedList_t *head;
SortedListElement_t *elements;

//sync variables
pthread_mutex_t mutex_lock;
volatile int lock = 0;

void *threadTask(void *thread_arg)
{
  // apply locks: either mutex or spin
  if (sync_type == 'm')
    {
      pthread_mutex_lock(&mutex_lock);
    }
  else if (sync_type == 's')
    {
      while (__sync_lock_test_and_set(&lock,1));
    }
  
  
  int* ptr_thread_num = (int*)thread_arg;
  int thread_num = *ptr_thread_num;
  long long element_number = thread_num*num_iterations;

  //insert all pre-allocated initialized elements into the list
  long j;
  for (j = element_number; j < element_number + num_iterations; j++)
    {
      
    }

  //get list length
  long long list_length = SortedList_length(head);
  
  //look up and delete each of the keys it had previously inserted
   
  char *element_key = malloc(sizeof(char)*11);
  SortedListElement_t *element_to_delete;

  int j;
  for (j = 0; j < num_iterations; j++)
    {
                  
      temp_element = SortedList_lookup(head,element_key);

      if (temp_element == NULL)
	{
	  fprintf(stderr,"Error: Corrupted List - Element not found in list\n");
	  exit(2);
	}

      if (SortedList_delete(temp_element) != 0)
	{
	  fprintf(stderr,"Error: Corrupted List - Invalid prev/next pointers\n");
	  exit(2);
	}

      current_element = current_element->next;

    }

  if (sync_type == 'm')
    pthread_mutex_unlock(&mutex_lock);
  else if (sync_type == 's')
    __sync_lock_release(&lock);
  // thread exits at end of function
}

void sigHandler()
{
  fprintf(stderr,"Error: Corrupted List - segmentation fault\n");
  exit(2);
}

int main (int argc, char** argv)
{
  //ADD SEGFAULT SIGNAL HANDLER
  signal(SIGSEGV, sigHandler);
  
  //getopt_long prep
  int opt;
  int input_fd;
  int output_fd;
  char buffer;
  
  int this_option_optiond = optind ? optind : 1;
  int option_index = 0;
  
  static struct option long_options[] =
    {
      {"threads",    optional_argument, 0, 't'},
        {"iterations", optional_argument, 0, 'i'},
      {"yield",      required_argument, 0, 'y'},
      {"sync",       required_argument, 0, 's'},
      {"debug",      no_argument,       0, 'd'},
      {0, 0, 0, 0}
    };
  
  while (1) {
    
    opt = getopt_long(argc, argv, "", long_options, &option_index);
    
    if (opt == -1)
      break;
    
    switch(opt)
      {
      case 'd':
	opt_debug = 1;
	break;
      case 't':
	opt_threads = 1;
	if (optarg == NULL || (atoi(optarg)== 0))
	  num_threads = 1;
	else
	  num_threads = atoi(optarg);
        break;
      case 'i':
	opt_iterations = 1;
	if (optarg == NULL || (atoi(optarg)== 0))
	  num_iterations = 1;
	else
	  num_iterations = atoi(optarg);
	break;
      case 'y':
	yielding = 1;
	int i;
	for (i = 0; i < strlen(optarg); i++)
	  {
	    if (optarg[i] == 'i')
	      {
		opt_yield_insert = 1;
		opt_yield = opt_yield | INSERT_YIELD;
	      }
	    if (optarg[i] == 'd')
	      {
		opt_yield_delete = 1;
		opt_yield = opt_yield | DELETE_YIELD;
	      }
	    if (optarg[i] == 'l')
	      {
		opt_yield_lookup = 1;
		opt_yield = opt_yield | LOOKUP_YIELD;
	      }
	    break;
	  case 's':
	    opt_sync = 1;
	    sync_type = optarg[0];
	    break;
	  default:
	    exit(1);
	    break;
	  }
      }    
    
    //initialize an empty list
    head = malloc(sizeof(SortedList_t));
    if (head == NULL)
      {
	fprintf(stderr, "Error: Unable to initialize list\n");
	exit(1);
      }
    
    //initialize the mutex lock
    if (sync_type == 'm')
      {
	if (pthread_mutex_init(&mutex_lock, NULL)!= 0)
	  fprintf(stderr, "Error: Unable to intiialize lock\n");
      }
    
    //create and initialize thread*iterations list elements
    long long num_elements = num_threads*num_iterations;
    
    elements = malloc(sizeof(SortedListElement_t)*num_elements);
    if (elements == NULL)
      {
	fprintf(stderr, "Error: Unable to intialize list elements\n");
	exit(1);
      }
    
    long numEle;
    for (numEle = 0; numEle < num_elements; numEle++)
      {
	//create random key
	char *new_key = malloc(sizeof(char)*11);
	if (new_key == NULL)
	  {
	    fprintf (stderr, "Error: Unable to initialize random keys\n");
	    exit(1);
	  }
	
	int m;
	for (m = 0; m < 10; m++)
	  {
	    new_key [m] = rand() % 254 + 1;
	  }
	new_key[10] = 0;
	
      (elements+numEle)->key = new_key;
      }


    int* thread_num = malloc(sizeof(int) * num_threads);
    if (thread_num == NULL)
      {
	fprintf(stderr, "Error: Unable to create thread numbers\n");
	exit(1);
      }

    
    //start the timer
    struct timespec start_time, end_time;
    clock_gettime(CLOCK_MONOTONIC, &start_time);
    
    
    if (opt_debug) fprintf(stdout, "Start Time: %i seconds and %i nanoseconds\n", start_time.tv_sec, start_time.tv_nsec);
    
    long th = 0;
    
    pthread_t *threadArr;
    threadArr = malloc(sizeof(pthread_t)*num_threads);
    if (threadArr == NULL)
      fprintf(stderr, "Error: Unable to create threads\n");
    
    for (th = 0; th < num_threads; th++)
      {
	long long element_num = 0;
	
	//create threads
	if(pthread_create(&threadArr[th], NULL, threadTask,(void*)th+1) != 0)
	  {
	    fprintf(stderr, "Error: unable to create threads\n");
	    exit(1);
	  }
	
	element_num += num_iterations;
	
	//if (opt_debug) fprintf(stdout, "//   Thread %i Created: \n//       Counter Value: %i\n", th+1, counter);
      }     
    
    for (th = 0; th < num_threads; th++)
      {
	//join threads
      pthread_join(threadArr[th],NULL);
      }
    
    //get end time
    clock_gettime(CLOCK_MONOTONIC, &end_time); 
    
    if (SortedList_length(head) != 0)
      {
	fprintf(stderr,"Error: Corrupted List - Final list length not equal to zero\n");
	exit(2);
      }
    
    //deinitialize allocated memeory
    free(head);
    //FREE ALLOCATED ELEMENTS
    
    /*  print results  */
    
    // print name
    fprintf(stdout,"list-");
    if (yielding) 
      {
	if (opt_yield_insert)
	  fprintf(stdout,"i");
	if (opt_yield_delete)
	  fprintf(stdout,"d");
	if (opt_yield_lookup)
	  fprintf(stdout, "l");
	
	fprintf(stdout, "-");
      }
    else
      fprintf(stdout, "none-");
    if (opt_sync)
      fprintf(stdout, "%c,", sync_type);
    else fprintf(stdout, "none,");
    
    int num_lists = 1;
    long long operations = num_threads*num_iterations*3;
    long long run_time = (1000000000L * (end_time.tv_sec - start_time.tv_sec)) + (end_time.tv_nsec - start_time.tv_nsec);
    long long average_time_per_operation = run_time/operations;
    
    fprintf(stdout, "%llu,", num_threads);                   // number of threads
    fprintf(stdout, "%llu,",num_iterations);                 // number of iterations
    fprintf(stdout, "%i,", num_lists);                       // number of lists
    fprintf(stdout, "%llu,", operations);                    // number of operations
    fprintf(stdout, "%llu,", run_time);                      // total run time
    fprintf(stdout, "%llu\n", average_time_per_operation);   // average time per operation
    
    free(threadArr);
    free(head);
    free(elements);
    free(thread_num);
    
    if (sync_type == 'm')
      pthread_mutex_destroy(&mutex_lock);
    
    exit(0);
  }
}

r[th], NULL, &threadTask, (void *) &thread_number) != 0)
	{
	  fprintf(stderr, "Error: unable to create threads\n");
	  exit(1);
	}
      
      //thread_number++;
      element_num += num_iterations;
    }     
  
  for (th = 0; th < num_threads; th++)
    {
      //join threads
	pthread_join(threadArr[th],NULL);
    }
  
  //get end time
  clock_gettime(CLOCK_MONOTONIC, &end_time); 
  
  if (SortedList_length(head) != 0)
      {
	fprintf(stderr,"Error: Corrupted List - Final list length not equal to zero\n");
	exit(2);
      }
    
  //deinitialize allocated memeory
  free(head);
  //FREE ALLOCATED ELEMENTS
  
  /*  print results  */
  
  // print name
  fprintf(stdout,"list-");
  if (yielding) 
    {
      if (opt_yield_insert)
	fprintf(stdout,"i");
      if (opt_yield_delete)
	fprintf(stdout,"d");
      if (opt_yield_lookup)
	fprintf(stdout, "l");
      
      fprintf(stdout, "-");
    }
  else
    fprintf(stdout, "none-");
  if (opt_sync)
    fprintf(stdout, "%c,", sync_type);
  else fprintf(stdout, "none,");
  
  int num_lists = 1;
  long long operations = num_threads*num_iterations*3;
  long long run_time = (1000000000L * (end_time.tv_sec - start_time.tv_sec)) + (end_time.tv_nsec - start_time.tv_nsec);
  long long average_time_per_operation = run_time/operations;
  
  fprintf(stdout, "%llu,", num_threads);                   // number of threads
  fprintf(stdout, "%llu,",num_iterations);                 // number of iterations
  fprintf(stdout, "%i,", num_lists);                       // number of lists
  fprintf(stdout, "%llu,", operations);                    // number of operations
  fprintf(stdout, "%llu,", run_time);                      // total run time
  fprintf(stdout, "%llu\n", average_time_per_operation);   // average time per operation
  
  free(threadArr);
  free(head);
  free(elements);
  
  if (sync_type == 'm')
    pthread_mutex_destroy(&mutex_lock);
  
  exit(0);
}


